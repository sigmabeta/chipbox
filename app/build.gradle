apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'


def getVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    // Add a million because of previous versionCode problems.
    // Multiply by 10 so LSB can represent build type.
    return (proc.getInputStream().readLines().get(0).toInteger() * 10 ) + 1000000
}

def getVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "net.sigmabeta.chipbox"

        minSdkVersion 21
        targetSdkVersion 28

        versionName getVersionName()

        // This block is different from the one you use to link Gradle to your CMake build script.
        externalNativeBuild {
            cmake {
                // Use the following syntax when passing arguments to variables:
                // arguments "-DVAR_NAME=VALUE"
                arguments "-DANDROID=true",
                        "-DANDROID_NATIVE_API_LEVEL=android-21",
                        "-DANDROID_STL=c++_shared"
            }
        }
    }

    // Use this block to link Gradle to your CMake build script.
    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    signingConfigs {
        release {
            String encodedPass = System.getenv("KEYPASS_ENCODED")
            String decodedPass;

            if (encodedPass != null) {
                decodedPass = new String(Base64.decoder.decode(encodedPass))
            }

            storeFile file("chipbox.jks")
            storePassword decodedPass
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword decodedPass
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
            jniDebuggable true
        }
    }

    flavorDimensions "abi"

    productFlavors {
        arm {
            dimension "abi"
            versionCode getVersionCode() + 1

            ndk {
                abiFilter "armeabi-v7a"
            }
        }

        x86 {
            dimension "abi"
            versionCode getVersionCode() + 3

            ndk {
                abiFilter "x86"
            }
        }

        arm_64 {
            dimension "abi"
            versionCode getVersionCode() + 5

            ndk {
                abiFilter "arm64-v8a"
            }
        }

        x86_64 {
            dimension "abi"
            versionCode getVersionCode() + 7

            ndk {
                abiFilter "x86_64"
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    // New layout hotness.
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    // Contains Lollipop UI View backports.
    implementation "androidx.appcompat:appcompat:1.0.2"

    // RecyclerView backports.
    implementation "androidx.recyclerview:recyclerview:1.0"

    // Contains new Material Design views. Automatically includes support-v4
    implementation "com.google.android.material:material:1.1.0-alpha04"

    // MediaStyle notifications.
    implementation "androidx.media:media:1.0.1"

    // Enable RxJava-style asynrchronous calls
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.0.2'

    // Display images loaded from storage.
    implementation 'com.squareup.picasso:picasso:2.5.2'

    // Contains the Kotlin Standard Library
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Simplified error logging.
    implementation 'com.jakewharton.timber:timber:4.5.1'

    // Dependency Injection.
    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
}

// To allow Viewholder caching.
// TODO is this still necessary?
androidExtensions {
    experimental = true
}